use robot as knowledge.

module robotEvents {
	
	% Update the agent's state of movement.
	forall bel( state(State)), percept(state(NewState))  
		do delete( state(State) ) + insert( state(NewState) ).
	
	% Record when we are entering or leaving a room.
	forall percept(in(Place)) do insert( in(Place) ).
	forall percept(not(in(Place))) do delete( in(Place) ).

	% Exercise 2.1b: insert rules for handling percepts other than "sendonce" percepts.
	% Update the place the agent is at
	forall bel(at(Place)), percept(at(NewPlace))
	   do delete(at(Place)) + insert(at(NewPlace)).
	
	%Record which blocks are in range
	forall percept(atBlock(Block)) do insert(atBlock(Block)).
	forall percept(not(atBlock(Block))) do delete(atBlock(Block)).
	
	%Record which blocks the agent is holding
	forall percept(holding(Block)) do insert(holding(Block)).
	forall percept(not(holding(Block))) do delete(holding(Block)).
	
	%Update the sequence index
	forall bel(sequenceIndex(Index)), percept(sequenceIndex(NewIndex))
	do delete(sequenceIndex(Index)) + insert(sequenceIndex(NewIndex)).
	
	% Predicate color(BlockID, ColorID), it is always send only to the player who is in the same room as the blocks.
	forall percept(color(Block, Color), in(Room)), not(bel(color(Block,Color), in(Room))) do insert(color(Block, Color)).
	forall bel(color(Block,Color),in(Room)), not(percept(color(Block,Color),in(Room))) do delete(color(Block,Color)).
	
	%implement block
	forall bel(in(Room),not(in('DropZone'))), percept(color(Block,Color)) do insert(block(Block,Color,Room)).
	
	%implement view
	forall bel(in(Room)) do insert(visited(Room)).
	%forall 
	% Exercise 2.5b: insert code for goal management that allows an agent to systematically search for blocks. (if needed)
	
	%if the place hasnt been visited yet it will implement a goal to go to that room
	if bel(nextColorInSeq(Color)),not(bel(block(Block,Color,Room))),bel(room(RoomID)),not(bel(finishedGame)), not(bel(visited(RoomID))), not(goal(in(X)))then adopt(in(RoomID)).
	
	%if the agent spotted a room which contains a block with the same color it will create a goal to hold that block
	if not(goal(holding(X))),bel(block(Block,Color,Room), nextColorInSeq(Color), not(holding(X))) then adopt(holding(Block)).
	
	%if the agent is on the goal to hold that block it will have to go to that room
	if goal(holding(Block)), bel(block(Block,Color,Room),nextColorInSeq(Color)), not(goal(in(X))) then adopt(in(Room)).
	
	%if the agent is on the goal to hold that block and it is in the room it will go at that block
	if goal(holding(Block)), bel(in(Room),block(Block,Color,Room)), not(goal(atBlock(X))) then adopt(atBlock(Block)).
	
	
	% Exercise 2.6b: insert code for goal management that makes the agent deliver a block when it 
	%   knows about a block that can be delivered. (if needed)
}
